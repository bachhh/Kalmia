# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 10m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: [].
  # build-tags:
  # - mytag

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  # skip-dirs-use-default: false

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  # go: "1.20"

issues:
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  exclude-dirs:
    ./node_modules
    ./tmp
    ./postgres_data
    ./dist
    ./data
    ./web
    ./minio_data
    ./rspress_data

# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  formats: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true

linters-settings:

  wrapcheck:
    # custom skip lints for these specific interface
    # TODO(bach): use extraIgnoreSigs, current golangci-lint version 1.62.2 does not
    # have warpcheck support extraIgnoreSigs
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - errors.Join(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - github.com/jackc/pgx/v5.Row
      - github.com/labstack/echo/v4.Context
      - H2-Corporation/kiso-api/internal/repository/kiso.Querier
      - H2-Corporation/kiso-api/pkg/misc.ConvertListErr[A, B any]
      - "H2-Corporation/kiso-api/infra/email.Sender"
      - "H2-Corporation/kiso-api/infra/email/templates.LoadTemplated[T any]"
      - "H2-Corporation/kiso-api/infra/email.NewRequestFromHtmlContent"
      - "H2-Corporation/kiso-api/infra/storage.Storage"
      - "H2-Corporation/kiso-api/infra/token.Manager"
      - "H2-Corporation/kiso-api/infra/pdfgen.PdfGen"
      - "H2-Corporation/kiso-api/infra/notifier.Notifier"
      - "H2-Corporation/kiso-api/pkg/pgrls"
      - "H2-Corporation/kiso-api/infra/pdfgen.GenTemplateHTML"

    # here we use ignorePackageGlobs to define the boundary to which are
    # considered "external packages"
    ignorePackageGlobs:
      # any function return from internal is an internal
      - "H2-Corporation/kiso-api/internal/*"

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

    # To disable the errcheck built-in exclude list.
    # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
    # Default: false
    disable-default-exclusions: false

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    # exclude-functions:
    #   - io/ioutil.ReadFile
    #   - io.Copy(*bytes.Buffer)
    #   - io.Copy(os.Stdout)

  gosimple:
    # Sxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: ["*"]

  govet:
    # Report about shadowed variables.
    # Default: false
    # check-shadowing: true

    shadow:
      # Whether to be strict about shadowing; can be noisy.
      # Default: false
      strict: true

      # Analyzer name, run `go tool vet help` to see all analyzers.
      # printf:

      # unusedresult:
      #   # Comma-separated list of functions whose results must be used
      #   # (in addition to defaults context.WithCancel,context.WithDeadline,context.WithTimeout,context.WithValue,
      #   # errors.New,fmt.Errorf,fmt.Sprint,fmt.Sprintf,sort.Reverse)
      #   # Default []
      #   funcs:
      #     - pkg.MyFunc
  exhaustive:
    default-signifies-exhaustive: true

  staticcheck:
    # SAxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: ["*"]

  # bidichk:
  #   left-to-right-embedding: false
  #   right-to-left-embedding: false
  #   pop-directional-formatting: false
  #   left-to-right-override: false
  #   right-to-left-override: false
  #   left-to-right-isolate: false
  #   right-to-left-isolate: false
  #   first-strong-isolate: false
  #   pop-directional-isolate: false

  gocyclo:
    # Minimal code complexity to report.
    min-complexity: 20

  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    dec-order:
      - const
      - var
      - type
      - func
    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    disable-init-func-first-check: true
    # If true, order of declarations is not checked at all.
    disable-dec-order-check: false

  dogsled:
    # Checks assignments with too many blank identifiers.
    # Default: 2
    max-blank-identifiers: 2

  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    threshold: 150

  errchkjson:
    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: false

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true
    # Check for plain error comparisons.
    # Default: true
    comparison: true

  gofumpt:
    extra-rules: true

  # TODO: enable this back when
  # https://github.com/denis-tingaikin/go-header/issues/22
  # goheader:
  #  template-path: "./LICENSE.goheader"

  makezero:
    # The directive enforces that slice created with make always have initial length of zero. This may sound draconian but
    # it encourages the use of append when building up arrays rather than C-style code featuring the index variable i
    # Default: false
    always: true

  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    # Default: false
    strict: true

  funlen:
    lines: 80
    statements: 50

  gosec:
    excludes:
      - G115

linters:
  # Disable all linters.
  # Default: false
  disable-all: true

  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    # - wrapcheck # check that every error is wrapped with errors.WithStack at every calls to an external library
    - nilerr # can cause serious bug, use //lint:ignore nilerr reason if error is ignorable
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    # - decorder
    - dogsled
    - errchkjson
    # - errname
    - errorlint
    # - execinquery # linter deprecated, also not very much useful when 90% of our queries are codegen
    - exhaustive
    # - exhaustruct
    # obsolete
    # - exportloopref
    - forbidigo
    - forcetypeassert
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoglobals
    - goconst
    - gocritic
    - gocyclo
    # - godot # NOTE(bach): pedantic
    # - godox # NOTE: godox does not allow TODO, though sometime TODO comment should be useful
    # - gofumpt
    - goheader
    - gosec
    # - ireturn
    - makezero
    - misspell
    - noctx
    # - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - prealloc
    - predeclared
    # - promlinter
    - reassign
    # - revive (bach): IMO this rule feel opinioned and annoying, stutter naming is fine
    # - sqlclosecheck
    # - tagliatelle
    - testpackage # The linter reports if a test is in a package without suffix _test. If you really need to test unexported function, then put the test into file XXX_internal_test.go
    - tparallel
    # - unconvert
    - unparam
    - usestdlibvars
  # - wastedassign
  # - whitespace # OPINION(bach): sometime a spacer blank line is good for separating sections of code

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: false

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  # - linters:
  #     - dupl
  #   severity: info
